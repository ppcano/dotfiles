# Define how Bash prompt looks like:
#
# User @ Host – working dir
#export PS1=”\u@\h\w$ ”
#export PS1=”\u@\h\w: “

# Cli Colors
export CLICOLOR=1
# use yellow for dir’s
export LSCOLORS=dxfxcxdxbxegedabagacad

# history handling
#
# Erase duplicates
export HISTCONTROL=erasedups
# resize history size
export HISTSIZE=10000
# append to bash_history if Terminal.app quits
shopt -s histappend

#http://ss64.com/bash/syntax-prompt.html
#https://gist.github.com/akora/d9f9105786ca541712b2
## settings for the main prompt
#
BLUE="\[\e[44;36m\]"
PATH_SHORT="\w"
PATH_BASENAME="\W"
COLOR_RESET="\[\e[0m\]"
NEW_LINE="\n"

# RAG colors indicating git status
RED="\[\033[0;31m\]"
AMBER="\[\033[0;33m\]"
GREEN="\[\033[0;32m\]"
NO_COLOR="\[\033[0m\]"

function set_git_branch () {
  # capture the output of the "git status" command
  git_status="$(git status 2> /dev/null)"
  # set color based on clean/staged/dirty
  if [[ ${git_status} =~ .*"working directory clean".* ]]; then
    B_STATE="${GREEN}"
  elif [[ ${git_status} =~ .*"Changes not staged for commit".* ]]; then
    B_STATE="${AMBER}"
  else
    B_STATE="${RED}"
  fi
}

parse_git_branch() {

  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'

}

prompt_cmd () {
  set_git_branch
  PS1="$PATH_BASENAME${B_STATE}\$(parse_git_branch)$NO_COLOR: "
}

PROMPT_COMMAND=prompt_cmd
